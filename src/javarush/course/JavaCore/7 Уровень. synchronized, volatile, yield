// Проблемы многопоточности: обращение к общему ресурсу
// Нет независимости нитей! Даешь synchronized!
// Проблема многопоточности — локальный кэш. Volatile
// yield — пропуск хода

// Синхронизация потоков. Оператор synchronized в Java https://javarush.com/groups/posts/1994-sinkhronizacija-potokov-operator-synchronized
// Управление потоками. Ключевое слово volatile и метод yield() https://javarush.com/groups/posts/1998-upravlenie-potokami-metodih-volatile-i-yield



Проблемы многопоточности: обращение к общему ресурсу
Раньше мы смотрели на программу, как на набор объектов, которые вызывают методы друг друга. Теперь все стало немного сложнее.
Программа – это скорее набор объектов, по которым лазает несколько «маленьких роботиков» – нитей – и выполняют команды, содержащиеся в методах
Программа становится сложнее. Разные нити меняют состояние разных объектов в соответствии с задачей, которую каждая из них выполняет. И могут мешать друг другу.
Но самое страшное происходит глубоко внутри Java-машины. Как я уже рассказывала, видимая одновременность работы нитей достигается за счет того,
что процессор постоянно переключается с одной нити на другую. Переключился на нить, поработал 10 миллисекунд, переключился на следующую нить,
там поработал 10 миллисекунд и так далее. И тут возникает проблема: переключение может произойти в самый неподходящий момент.
Ожидаемый код: Коле 15 лет Лене 21 год
Реальный: Коле Лене  15 21 лет год

Нет независимости нитей! Даешь synchronized!
Было выяснено, что нити мешают друг другу, когда пытаются сообща работать с общими объектами и/или ресурсами
Поэтому был придуман специальный объект – мютекс. Это как табличка на двери туалета «свободно» «занято».
Он имеет два состояния – объект свободен и объект занят, или их еще называют заблокирован и разблокирован.
Когда какой-то нити нужен общий для всех нитей объект, она проверяет мютекс, связанный с этим объектом. Если мютекс свободен,
то нить блокирует его (помечает как занятый) и начинает использование общего ресурса. После того, как она сделала свои дела, мютекс разблокируется (помечается как свободен).
Если же нить хочет использовать объект, а мютекс заблокирован, то нить засыпает в ожидании. Когда мютекс, наконец,
освободится занятой нитью, наша нить тут же заблокирует его и приступит к работе. Аналогия с табличками для туалета один в один.
class MyClass {
    private String name1 = "Оля";
    private String name2 = "Лена";
public void swap(){
    synchronized (this){
        String s = name1;
        name1 = name2;
        name2 = s;
}}}
Когда одна нить заходит внутрь блока кода, помеченного словом synchronized, то Java-машина тут же блокирует мютекс у объекта,
который указан в круглых скобках после слова synchronized. Больше ни одна нить не сможет зайти в этот блок, пока наша нить его не покинет.
Как только наша нить выйдет из блока, помеченного synchronized, то мютекс тут же автоматически разблокируется и будет свободен для захвата другой нитью.
Словом synchronized может быть помечен как кусок кода, так и метод.

Проблема многопоточности — локальный кэш. Volatile.
В компьютере есть память, где хранятся данные и команды (код), а также процессор, который исполняет эти команды и работает с данными.
Процессор считывает данные из памяти, изменяет и записывает их обратно в память. Чтобы ускорить работу процессора в него встроили свою «быструю» память – кэш.
Чтобы ускорить свою работу, процессор копирует самые часто используемые переменные из области памяти в свой кэш и все изменения с ними производит в этой быстрой памяти.
А после – копирует обратно в «медленную» память. Медленная память все это время содержит старые(!) (неизмененные) значения переменных.
И тогда может возникнуть проблема. Одна нить меняет переменную, такую как isCancel или isInterrupted из примера ниже,
а вторая нить «не видит» этого изменения, т.к. оно было совершено в быстрой памяти. Это следствие того, что нити не имеют доступа к кэшу друг друга.
(Процессор часто содержит несколько независимых ядер и нити физически могут исполняться на разных ядрах.)
Сначала думали отключить работу с кэшем, но потом оказалось, что из-за этого программы работают в разы медленнее.
Тогда придумали другое решение.
Было придумано специальное ключевое слово volatile. Помещение его перед определением переменной запрещало помещать ее значение в кэш.
Вернее не запрещало помещать в кэш, а просто принудительно всегда читало и писало ее только в обычную (медленную) память.
private volatile boolean isCancel = false;
Из-за модификатора volatile чтение и запись значения переменной всегда будут происходить в обычной, общей для всех нитей, памяти.

yield — пропуск хода
процессор постоянно переключается между нитями. Каждой нити выделяется небольшой кусочек процессорного времени, называемый квантом.
Когда это время истекает – процессор переключается на другую нить и начинает выполнять ее команды.
Вызов метода Thread.yield() позволяет досрочно завершить квант времени текущей нити или, другими словами, переключает процессор на следующую нить.
Необходимость в этом возникает не часто. Вызов yield приводит к тому, что «наша нить досрочно завершает ход», и что следующая за yield команда начнется с полного кванта времени.
Значит шансы, что ее прервут – меньше. Особенно, если она небольшая (по времени). Такой подход можно использовать при оптимизации некоторых процессов.
Еще могу добавить, что метод Thread.sleep(0) работает фактически так же.