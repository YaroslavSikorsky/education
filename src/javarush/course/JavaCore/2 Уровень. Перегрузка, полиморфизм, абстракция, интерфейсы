// Полиморфизм и переопределение




Полиморфизм и переопределение
В нашем классе-потомке мы объявляем такой же метод, как и метод класса родителя, который хотим изменить
Главное, не в каком классе написан метод, а какой тип (класс) объекта, у которого этот метод вызван.
— Наследовать и переопределять можно только нестатические методы. Статические методы не наследуются и, следовательно, не переопределяются.
Cow cow = new Whale();
  cow.printName();
На экран будет выведена надпись
Я – кит.
 какой именно метод printName вызовется, от класса Cow или Whale, влияет не тип переменной, а тип – объекта, на который
 она ссылается.
В переменной типа Cow сохранена ссылка на объект типа Whale, и будет вызван метод printName, описанный в классе Whale.
Для ссылочных типов, т.е. классов, приведение типов работает не так, как для примитивных типов. Хотя у ссылочных типов
тоже есть расширение и сужение типа. Пример:

//Перегрузка методов
 Перегрузка – параметрический полиморфизм.
Уникальным должно быть объединение из имени и типов параметров этого метода

//Абстрактные классы
1) Абстрактный класс может содержать объявление метода без его реализации. Такой метод называется абстрактным.
2 Абстрактный метод помечается специальным ключевым словом abstract.
3 Создавать объекты абстрактного класса нельзя. Такой код просто не скомпилируется.
.4 Если ты наследовал свой класс от абстрактного класса, то нужно переопределить все унаследованные абстрактные методы — написать
для них реализацию. Иначе такой класс тоже придется объявить абстрактным. Если в классе есть хотя-бы один нереализованный метод, объявленный прямо в нем или унаследованный от класса-родителя, то класс считается абстрактным

Интерфейсы
//Интерфейс очень напоминает абстрактный класс, у которого все методы абстрактные. Он объявляется так же, как и класс,
только используется ключевое слово interface
1) Вместо слова class пишем interface.
2) Содержит только абстрактные методы (слово abstract писать не нужно).
3) На самом деле у интерфейсов все методы — public
Интерфейс может наследоваться только от интерфейсов.
Интерфейсов-родителей может быть много.


У интерфейсов есть два сильных преимущества по сравнению с классами:
1) Отделение «описания методов» от их реализации
2 Множественное наследование.

