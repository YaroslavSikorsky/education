// Адаптеры
// Reader/Writer
// FileReader/FileWriter
// BufferedReader/InputStreamReader

// Паттерн проектирования Адаптер https://javarush.com/groups/posts/2139-pattern-proektirovanija-adapter
// Практика работы с классами BufferedReader и InputStreamReader https://javarush.com/groups/posts/2140-praktika-rabotih-s-klassami-buffreredreader-i-inputstreamreader



Адаптеры
Представь, что в твоей программе ты используешь два фреймворка, написанные другими программистами/компаниями. Оба фреймворка
очень хорошие и используют принципы ООП: абстракцию, полиморфизм, инкапсуляцию. Они вместе практически полностью покрывают задачи твоей программы.
За тобой осталось простая задача — объекты, которые создает один фреймворк нужно передать во второй. Но оба фреймворка совершенно разные
и «не знают друг о друге» — т.е. не имеют общих классов. Тебе нужно как-то преобразовывать объекты одного фреймворка в объекты другого.
Код на Java	Описание
class MyClass implements Interface2
{
 private Interface1 object;
 MyClass(Interface1 object)
 {
  this.object = object;
 }
 // тут располагаются методы Interface2,
 // которые вызывают методы Interface1
}
Это схематическое описание «паттерна проектирования адаптер».
Суть его в том, что класс MyClass является преобразователем (адаптером) одного интерфейса к другому.

Reader/Writer
InputStreamReader преобразует интерфейс InputStream к интерфейсу Reader. BufferedReader не адаптер в чистом виде, т.к.
разработчики Java решили не выделять его методы в отдельный интерфейс. Но по духу, он стоит очень близко к ним.
Вместо того, чтобы писать 100500 различных классов, разработчики Java написали два десятка адаптеров и разрешили их соединять
друг с другом, как программисту захочется.
Reader и Writer это два абстрактных класса, которые очень похожи на классы InputStream и OutputStream.
Но в отличие от них, эти два класса работают с символами. Они читают символы и записывают символы. Они очень удобны при работе с текстовой информацией.
Методы класса Reader	                            Что метод делает
int read(char[] cbuf);                  — метод сразу читает много символов в буфер (массив символов), пока буфер не заполнится или не закончатся символы там, откуда он их читает.
                                          Метод возвращает количество реально прочитанных символов (оно может быть меньше длины массива)
int read();                             — метод читает один символ и возвращает его как результат. Результат расширяется до int, для красоты. Если доступных символов нет, метод вернет «-1».
boolean ready();                        — метод возвращает true если есть еще непрочитанные символы для методов read
void close();                           — метод «закрывает» поток, вызывается после окончания работы с потоком.
                                          Объект выполняет служебные операции, связанные с закрытием файла на диске и т.д.
                                          Из потока больше нельзя читать данные.
Методы класса Writer	                            Что метод делает
void write(int c);                      — метод записывает один символ. Тип int сужается до char, лишняя часть просто отбрасывается.
void write(char[] cbuff);               — метод записывает массив символов.
void write(String s);                   — метод записывает строку. Она просто преобразовывается в массив символов и вызывается второй метод.
void flush();                           — если есть данные, которые хранятся где-то внутри и еще не записаны, то они записываются.
void close();                           — метод «закрывает» поток – вызывается после окончания работы с потоком.
                                          Объект выполняет служебные операции, связанные с закрытием файла на диске и т.д. В поток больше нельзя писать данные, flush при этом вызывается автоматически.
Важно понять, что Reader и Writer – это абстрактные классы. Они ничего не делают и практически не содержат кода.
Все их методы должны будут реализовываться в классах, которые будут унаследованы от них. Их же задача – стандартизировать механизм взаимодействия между классами.
Разработчикам не нужно изобретать свои стандарты для взаимодействия друг с другом. Гораздо удобнее всем поддерживать несколько базовых стандартов.
Тогда классы, написанные разными программистами, смогут легко взаимодействовать не только с классами, написанными разработчиками Java, но и с классами других программистов.

FileReader/FileWriter
Эти классы являются адаптерами между объектом File и “интерфейсами” InputStream, OutputStream, Reader, Writer.
public static void main(String[] args) throws Exception
{
 FileReader reader = new FileReader("c:/data.txt");
 FileWriter writer = new FileWriter("c:/result.txt");
 while (reader.ready()) //пока есть непрочитанные байты в потоке ввода
 {
  int data = reader.read(); //читаем один символ (char будет расширен до int)
  writer.write(data); //пишем один символ (int будет обрезан/сужен до char)
 }
 //закрываем потоки после использования
 reader.close();
 writer.close();
}

BufferedReader/InputStreamReader
Класс InputStreamReader является классическим адаптером от интерфейса InputStream к интерфейсу Reader.
Когда ты запрашиваешь (читаешь посредством read) у объекта типа InputStreamReader очередной символ, он читает из переданного ему в конструктор InputStream несколько байт
и возвращает их как один char.
Но Reader – не самый удобный объект для работы. Нам часто нужно прочитать не все введенные пользователем символы за один раз, а разбить эти символы на строки.
— Но у класса Reader ведь есть метод read(CharBuffer s), разве мы не можем использовать его?
— Этот метод читает данные куском, размер которого равен размеру буфера и помещает их в объект CharBuffer.
Текст обычно делится на строки (линии, line — строка по-английски). Поэтому метод read(CharBuffer s) может прочитать несколько «линий» за один раз.
Если же нам нужно прочитать текст именно до конца «линии» (т.е. все символы строки до enter), для этого лучше поискать что-нибудь еще.
В классе BufferedReader.
Класс BufferedReader, являющийся удобной надстройкой над Reader, имеет один очень удобный метод: readLine().
Этот метод позволяет читать из Reader-а сразу целыми строками (т.е. линиями). Когда ты в своем коде вызываешь метод readLine,
он читает из объекта Reader символы, пока не встретится enter. Как только enter встретится, метод склеит символы в одну строку и вернет ее.