// Причины существования интерфейсов — поддержка заявленного поведения
// Как пользоваться абстрактными классами
// Множественное наследование интерфейсов
// Абстрактный класс vs. интерфейс
// Стандартные интерфейсы: InputStream, OutputStream

// Разница между абстрактными классами и интерфейсами https://javarush.com/groups/posts/1985-raznica-mezhdu-abstraktnihmi-klassami-i-interfeysami



Причины существования интерфейсов — поддержка заявленного поведения
Интерфейс – это стандартизированный способ взаимодействия двух вещей, и этот стандарт известен двум сторонам.
Методы – это действия над объектом, над его данными. И если класс реализует определенные методы, то он «поддерживает исполнение» определенных команд.
Каждый interface, как и class, имеет уникальное имя. Обе стороны могут быть на 100% уверены, что вторая сторона поддерживает именно нужный (известный им) интерфейс, а не похожий.
Каждый интерфейс налагает определенные ограничения на тот класс, который собирается поддерживать его. Класс сам решает (его разработчик),
что он будет делать в случае вызова его методов, которые он унаследовал от интерфейса, но результат должен находиться в пределах ожиданий.
Чобы поддержать реализацию какого-то интерфейса (группы интерфейсов) в своем классе нужно:
1 Унаследоваться от них.
2 Реализовать объявленные в них методы.
3 Методы должны делать то, для чего они предназначены.

Как пользоваться абстрактными классами
Обычно класс является моделью какой-нибудь сущности. Но абстрактный класс содержит не только реализованные методы, но и не реализованные.
Представь себе почти законченный кузов машины на конвейере. Туда могут поставить как спортивный двигатель, так и экономичный.
Как кожаный салон, так и матерчатый. Конкретная реализация машины еще не определена. Более того, таких конкретных реализаций на основе этого кузова предполагается несколько.
Но в таком виде машина никому не нужна. Это — классический абстрактный класс: его объекты не имеют смысла, поэтому их создание запрещено, класс имеет смысл,
но только для его многочисленных полноценных наследников, которые будут созданы на его основе

Множественное наследование интерфейсов
Когда пишется большая программа, обычно с этого сразу и начинают:
1 Определяют все существующие способности/роли.
2 Затем описывают взаимодействие между этими ролями.
3 А потом просто наделяют все классы их ролями.

Абстрактный класс vs. интерфейс
Наследование
Абстрактный класс может унаследоваться только от одного класса и любого количества интерфейсов.
Интерфейс не может наследоваться от классов, но может от любого количества интерфейсов.
Абстрактные методы
Абстрактный класс может содержать абстрактные методы. Но может и не содержать их вообще.
Все не статические и не default методы интерфейса – абстрактные – не содержат реализации. Интерфейс может не содержать никаких методов вообще.
Методы с реализацией
Абстрактный класс может содержать методы с реализацией.	Интерфейс может содержать методы по умолчанию (default methods).
Данные
Абстрактный класс - никаких ограничений.
Интерфейс содержит только public final static данные.
Создание объекта
Нельзя создать объект абстрактного класса.
Нельзя создать объект интерфейса.

Стандартные интерфейсы: InputStream, OutputStream
InputStream и OutputStream. Объявлены они как абстрактные классы, но если начать разбираться, то можно увидеть,
что по своей сути – это интерфейсы. Почти все их методы абстрактные, кроме нескольких незначительных методов.
В поток для записи можно записывать данные. Для этого у него есть метод write().
Из потока для чтения можно данные читать. Для этого у него есть метод read().
InputStream – это интерфейс потока чтения, описывающий такую способность: «из меня можно читать байты».
А OutputStream– это, соответственно, интерфейс потока записи, описывающий способность: «в меня можно записывать байты».