// Оператор instanceof
// Приведение типов. Расширение и сужение

// Оператор Instanceof в Java https://javarush.com/groups/posts/2018-kak-rabotaet-operator-instanceof
// Расширение и сужение ссылочных типов https://javarush.com/groups/posts/2019-rasshirenie-i-suzhenie-ssihlochnihkh-tipov



Оператор instanceof
Используется в виде: «объект» instanceof «класс».
Object o = new Integer(3);
boolean isInt = o instanceof Integer;
isInt будет равно true. Объект, на который ссылается переменная o, является объектом класса Integer.
Object o = "Mama";
boolean isInt = o instanceof Integer;
isInt будет равно false. Объект, на который ссылается переменная o, не является объектом класса Integer, он является объектом класса String.
InputStream is = new FileInputStream("");
boolean isFIS = is instanceof
FileInputStream;
isFIS будет равно true. Объект, на который ссылается переменная is, является объектом класса FileInputStream
Этот оператор учитывает и наследование и интерфейсы.
Оператор instanceof имеет вид: a instanceof B.
Другими словами, оператор instanceof вернет значение true, если:
1 переменная а хранит ссылку на объект типа B
2 переменная a хранит ссылку на объект, класс которого унаследован от B
3 переменная а хранит ссылку на объект реализующий интерфейс B
Иначе оператор instanceof вернет значение false.

Приведение типов. Расширение и сужение
Представь себе цепочку наследования класса: класс, его родитель, родитель родителя и т.д. до самого класса Object.
Т.к. класс содержит все методы класса, от которого он был унаследован, то объект этого класса можно сохранить в переменную любого из его типов родителей.
Если в результате присваивания мы двигаемся по цепочке наследования вверх (к типу Object), то это — расширение типа
(оно же — восходящее преобразование или upcasting), а если вниз, к типу объекта, то это — сужение типа (оно же — нисходящее преобразование или downcasting).
Движение вверх по цепочке наследования называется расширением, поскольку оно приводит к более общему типу.
Но при этом теряется возможность вызвать методы, которые были добавлены в класс при наследовании.
Cat cat = new Tiger();
Animal animal = cat;
Object obj = cat;
Тут мы видим три присваивания. Все они являются примерами расширения типа.
Оператор преобразования типа тут не нужен, так как не нужна проверка. Ссылку на объект всегда можно сохранить в переменную любого его базового типа.
С объектом при таком присваивании ничего не происходит! Меняется только количество методов, которое можно вызвать с помощью конкретной переменной-ссылки.
Например, переменная класса Cat позволяет вызывать методы doAnimalActions & doCatActions, и ничего не знает о методе doTigerActions, даже если ссылается на объект класса Tiger.

